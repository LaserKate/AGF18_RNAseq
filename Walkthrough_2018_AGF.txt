#AGF2018 

######################## Larvae #######################

#extract fastq files from each folder
mv */*.fastq.gz .

#transfer files to Alabama Super Computer
scp *.fastq.gz aubmes@dmc.asc.edu:/home/aubmes/Moorea/AGF/working

#unzip all fastqs
gunzip *.gz

#obtain A.millepora genome from https://przeworskilab.com/data/
#obtain Misha’s Tagseq scripts 
git clone https://github.com/z0on/tag-based_RNAseq.git

####################### concatenate fastq files by sample ID
# making scripts executable chmod u+x

for file in *.fastq; do echo "mv ${file} sample_${file}"  >> rename; done
#make rename into a bash script, make executable, run

/home/aubmes/bin/tag-based_RNAseq/ngs_concat.pl 'sample'  'sample_(.+)_L00'
#make ngs_concat into a bash script, make executable, run

####################### adaptor trimming, deduplicating, and quality filtering with Misha's script

for F in *.fq; do echo "/home/aubmes/bin/tag-based_RNAseq/tagseq_clipper.pl $F | cutadapt - -a AAAAAAAA -a AGATCGG -q 15 -m 25 -o ${F/.fq/}.trim" >>clean; done

####################### run fastqc on trimmed samples

mkdir Fastqc_Results
echo fastqc -o fastqc/ -f fastq *.trim > runFQC

#extract html files from each folder
mv */*.html .

####################### count trimmed reads

/home/aubmes/bin/tag-based_RNAseq/countreads.pl fastq > countreadsfq.txt
/home/aubmes/bin/tag-based_RNAseq/countreads.pl trim > countreadstrim.txt

####################### mapping reads to Amillepora genome using bowtie2

bowtie2-build Amil.all.maker.transcripts.fasta Amil.all.maker.transcripts.fasta

/home/aubmes/bin/tag-based_RNAseq/tagseq_bowtie2map.pl "trim$" /home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil.all.maker.transcripts.fasta > maps

grep "overall alignment rate" maps.o439811 > map_efficiency.txt

####################### compile counts

awk '{ print $1, $2 }' Amillepora_trinotate_annotation_report.xls > seq2seq.tab
#then I added the -RA bit in excel

/home/aubmes/bin/tag-based_RNAseq/samcount_launch_bt2.pl '\.sam' /home/aubmes/Moorea/AGF/genome/Amil_v2.01/seq2seq.tab > sc

/home/aubmes/bin/tag-based_RNAseq/expression_compiler.pl *.sam.counts > AGF_larvae_2018_geneCounts.txt


####################### tar directory
tar -zcvf AGF_Larvae_2018_all.tar.gz /home/aubmes/Moorea/AGF/working

##########################################################################
# AGF 2018 Larvae - get SNPs

#remap to retain sam headers
for file in *.trim; do echo "bowtie2 --local -x /home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil.all.maker.transcripts.fasta -U ${file} -S ${file/.trim/nohead.sam} --no-unal -k 5" >> map_nohead; done

#convert to sorted, indexed bams
samSort.py *nohead.sam > convertSort

#make text file for pileup
for file in *Sorted.bam; do echo ${file} >> bams.txt; done
#remake bams.txt for only site by site crosses (purebreds)
#bams_PB.txt

# run pileup, set this up in nano as mpileup
bcftools mpileup -b bams_PB.txt -f '/home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil.all.maker.transcripts.fasta' -C 50 -o AGF_larvaeRNA_bcf.vcf -q 5 -Q 30 -Ov -I

#call the SNPs, don't include indels, output as vcf file
bcftools call -Ov -o Aten_larval_SNPs.vcf -V indels -v AGF_larvaeRNA_bcf.vcf -c

#snpcall_1
grep -v "^#" Aten_larval_SNPs.vcf |wc -l
# this file as 531,343 SNPs

# filter for sites with at least a depth of 20
vcfutils.pl varFilter -d 20 Aten_larval_SNPs.vcf > Aten_larval_SNPs_filtered.vcf

#snpcall_2
grep -v "^#" Aten_larval_SNPs_filtered.vcf |wc -l
#188,305 SNPs

#further filter SNPs, change —max-missing to 0.5 (allowing for 0.5% of sites to be missing)
vcftools --thin 5000 --vcf Aten_larval_SNPs_filtered.vcf --recode --out Aten_larval_SNPs_filtered_1 --max-missing 0.5 --mac 3 --minDP 10 --max-alleles 2 --maf 0.015 --remove-indels

grep -v "^#" Aten_larval_SNPs_filtered_1.recode.vcf |wc -l
#10,695 SNPs

#run pairwise Fst to find SNP outliers for CU
vcftools --vcf Aten_larval_SNPs_filtered_1.recode.vcf --weir-fst-pop bams_CU.txt --weir-fst-pop bams_notCU.txt --out fst_CUvNotCU

vcftools --vcf Aten_larval_SNPs_filtered_1.recode.vcf --weir-fst-pop bams_CU.txt --weir-fst-pop bams_BK.txt --out fst_CUvBK

vcftools --vcf Aten_larval_SNPs_filtered_1.recode.vcf --weir-fst-pop bams_CU.txt --weir-fst-pop bams_DR.txt --out fst_CUvDR

vcftools --vcf Aten_larval_SNPs_filtered_1.recode.vcf --weir-fst-pop bams_CU.txt --weir-fst-pop bams_LS.txt --out fst_CUvLS

vcftools --vcf Aten_larval_SNPs_filtered_1.recode.vcf --weir-fst-pop bams_CU.txt --weir-fst-pop bams_SB.txt --out fst_CUvSB


##### rerun SNP analysis with all samples
#make text file for pileup

for file in *Sorted.bam; do echo ${file} >> bams.txt; done
#count number of bam files in .txt
Wc -l bams.txt #96

# run pileup, set this up in nano as mpileup
bcftools mpileup -b bams.txt -f '/home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil.all.maker.transcripts.fasta' -C 50 -o AGF_larvaeRNA_all_bcf.vcf -q 5 -Q 30 -Ov -I

#call the SNPs, don't include indels, output as vcf file
bcftools call -Ov -o Aten_larval_SNPs_all.vcf -V indels -v AGF_larvaeRNA_all_bcf.vcf -c

#snpcall_1
grep -v "^#" Aten_larval_SNPs_all.vcf |wc -l
# this file as 661,875 SNPs

# filter for sites with at least a depth of 20
vcfutils.pl varFilter -d 20 Aten_larval_SNPs_all.vcf > Aten_larval_SNPs_filtered_all.vcf

#snpcall_2
grep -v "^#" Aten_larval_SNPs_filtered.vcf |wc -l
#283,848 SNPs

#further filter SNPs, change —max-missing to 0.5 (allowing for 0.5% of sites to be missing)
vcftools --thin 5000 --vcf Aten_larval_SNPs_filtered_all.vcf --recode --out Aten_larval_SNPs_filtered_all_1 --max-missing 0.5 --mac 3 --minDP 10 --max-alleles 2 --maf 0.015 --remove-indels

grep -v "^#" Aten_larval_SNPs_filtered_all_1.recode.vcf |wc -l
#13,092 SNPs

##### rerun SNP analysis with all samples using angsd 

####################### angsd 

# didn’t do this
#assessing base qualities and coverage depth
# -minMapQ 20 : only highly unique mappings (prob of erroneous mapping = 1%)
# -baq 1 : realign around indels (not terribly relevant for 2bRAD reads mapped with --local option)
# -maxDepth : highest total depth (sum over all samples) to assess; set to 10x number of samples

FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -maxDepth 1200"

TODO="-doQsDist 1 -doDepth 1 -doCounts 1 -dumpCounts 2"

# a long-ish contig SN:scaffold7_cov100 LN:513095

# in the following line, -r argument is one chromosome or contig to work with (no need to do this for whole genome as long as the chosen chromosome or contig is long enough)

angsd -b bams -r scaffold7_cov100 -GL 1 $FILTERS $TODO -P 1 -out dd


# ----- IBS with ANGSD

ls *.bam > bams

# F I L T E R S :
# -snp_pval 1e-5 : high confidence that the SNP is not just sequencing error 
# -minMaf 0.05 : only common SNPs, with allele frequency 0.05 or more.
# set minInd to 75-80% of total number of samples, 20 samples but “should be” 10 genotypes. Try with 5 first.
# also adding  filters against very badly non-HWE sites (such as, all calls are heterozygotes => lumped paralog situation) and sites with really bad strand bias:
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 20 -minQ 25 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -minInd 5 -snp_pval 1e-5 -minMaf 0.05"

# T O   D O :
# -GL 1 : samtools likelihood model
# -doGlf 2 : output beagle format (for admixture)
# -doGeno 8 : bgenotype likelihoods format for ngsLD
# -makeMatrix 1 -doIBS 1 -doCov 1 : identity-by-state and covariance matrices based on single-read resampling (robust to variation in coverage across samples)
TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -doCov 1 -doGeno 8 -doBcf 1 -doPost 1 -doGlf 2"

angsd -b bams -GL 1 $FILTERS $TODO -P 1 -out ibs05

# how many SNPs?
zcat ibs05.mafs.gz | wc -l
#172,434 SNPs

scp ibs05.ibsMat and bams to laptop, use step1_IBS.R to analyze

##########################################################################
# AGF 2018 Juveniles

#extract fastq files from each folder
mv */*.fastq.gz .

#transfer files to Alabama Super Computer
scp *.fastq.gz aubmes@dmc.asc.edu:/home/aubmes/Moorea/AGF/working

#unzip all fastqs
gunzip *.gz

####################### concatenate fastq files by sample ID
# making scripts executable chmod u+x

for file in *.fastq; do echo "mv ${file} sample_${file}"  >> rename; done
#make rename into a bash script, make executable, run

/home/aubmes/bin/tag-based_RNAseq/ngs_concat.pl 'sample'  'sample_(.+)_L00'
#make ngs_concat into a bash script, make executable, run

####################### adaptor trimming, deduplicating, and quality filtering with Misha's script

for F in *.fq; do echo "/home/aubmes/bin/tag-based_RNAseq/tagseq_clipper.pl $F | cutadapt - -a AAAAAAAA -a AGATCGG -q 15 -m 25 -o ${F/.fq/}.trim" >>clean; done

####################### count trimmed reads

/home/aubmes/bin/tag-based_RNAseq/countreads.pl fq > AGF2018_juves_countreadsfq.txt
/home/aubmes/bin/tag-based_RNAseq/countreads.pl trim > AGF2018_juves_countreadstrim.txt

####################### Mapping 
#combine Amil transcripts and ABCD transcripts 
cat Amil.all.maker.transcripts.fasta symABCD.fasta > Amil_symABCD.fasta

bowtie2-build Amil_symABCD.fasta Amil_symABCD.fasta

/home/aubmes/bin/tag-based_RNAseq/tagseq_bowtie2map.pl "trim$" /home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil_symABCD.fasta > maps_symall

grep "overall alignment rate" maps.o494697 > map_efficiency_AmilsymABCD.txt

#counting up reads matching up to different sym clades using Misha’s script 
zooxtype.pl host="Amillepora03937-RA" >zooxCounts.txt

####################### removing sym mapping reads

for file in *.sam; do echo grep -v -e chr11 -e chr12 -e chr13 -e chr14 ${file} \> ${file/.sam/.host.sam} >> sort; done

####################### compiling counts

for file in *.host.sam; do echo /home/aubmes/bin/tag-based_RNAseq/samcount.pl ${file} /home/aubmes/Moorea/AGF/genome/Amil_v2.01/seq2seq.tab aligner=bowtie2 \> ${file/.sam/.sam.counts} >> counts; done

/home/aubmes/bin/tag-based_RNAseq/expression_compiler.pl *.sam.counts > AGF_juvenile_2018_geneCounts.txt

####################### get KOG annotation
#  KOG classes (single-letter):
awk -F "\t" 'BEGIN {OFS="\t" }{print $1,$12 }' Amillepora_euk.emapper.annotations | grep -Ev "[,#S]" >amil_gene2kogClass1.tab
# converting single-letter KOG classes to text understood by KOGMWU package (must have kog_classes.txt file in the same dir):
awk 'BEGIN {FS=OFS="\t"} NR==FNR {a[$1] = $2;next} {print $1,a[$2]}' kog_classes.txt amil_gene2kogClass1.tab > Amil_gene2kogClass.tab

####################### call SNPs for Juves

#remap to retain sam headers
for file in *.trim; do echo "bowtie2 --local -x /home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil_symABCD.fasta -U ${file} -S ${file/.trim/nohead.sam} --no-unal -k 5" >> map_nohead; done

#removing sym mapping reads
for file in *nohead.sam; do echo grep -v -e chr11 -e chr12 -e chr13 -e chr14 ${file} \> ${file/.sam/.host.sam} >> sort; done

#convert to sorted, indexed bams
samSort.py *nohead.host.sam > convertSort

#make text file for pileup
for file in *nohead.host_Sorted.bam; do echo ${file} >> bams.txt; done

#count number of bam files in .txt
wc -l bams.txt #146

# run pileup, set this up in nano as mpileup
bcftools mpileup -b bams.txt -f '/home/aubmes/Moorea/AGF/genome/Amil_v2.01/Amil.all.maker.transcripts.fasta' -C 50 -o AGF_juvesRNA_all_bcf.vcf -q 5 -Q 30 -Ov -I

#call the SNPs, don't include indels, output as vcf file
bcftools call -Ov -o Aten_juves_SNPs_all.vcf -V indels -v AGF_juvesRNA_all_bcf.vcf -c

#snpcall_1
grep -v "^#" Aten_juves_SNPs_all.vcf |wc -l
# this file as 701,730 SNPs

# filter for sites with at least a depth of 20
vcfutils.pl varFilter -d 20 Aten_juves_SNPs_all.vcf > Aten_juves_SNPs_filtered_all.vcf

#snpcall_2
grep -v "^#" Aten_juves_SNPs_filtered_all.vcf |wc -l
#302,426 SNPs

#further filter SNPs, change —max-missing to 0.5 (allowing for 0.5% of sites to be missing)
vcftools --thin 5000 --vcf Aten_juves_SNPs_filtered_all.vcf --recode --out Aten_juves_SNPs_filtered_all_1 --max-missing 0.5 --mac 3 --minDP 10 --max-alleles 2 --maf 0.015 --remove-indels

grep -v "^#" Aten_juves_SNPs_filtered_all_1.recode.vcf |wc -l
#11,934 SNPs



